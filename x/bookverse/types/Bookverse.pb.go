// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nftstays/nftStay.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftStay struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	SID         string `protobuf:"bytes,3,opt,name=sID,proto3" json:"sID,omitempty"`
	Owner       string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Image       string `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	TokenUri    string `protobuf:"bytes,8,opt,name=tokenUri,proto3" json:"tokenUri,omitempty"`
}

func (m *NftStay) Reset()         { *m = NftStay{} }
func (m *NftStay) String() string { return proto.CompactTextString(m) }
func (*NftStay) ProtoMessage()    {}
func (*NftStay) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfd4549cc2c9013f, []int{0}
}
func (m *NftStay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftStay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftStay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftStay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftStay.Merge(m, src)
}
func (m *NftStay) XXX_Size() int {
	return m.Size()
}
func (m *NftStay) XXX_DiscardUnknown() {
	xxx_messageInfo_NftStay.DiscardUnknown(m)
}

var xxx_messageInfo_NftStay proto.InternalMessageInfo

func (m *NftStay) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *NftStay) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NftStay) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *NftStay) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NftStay) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NftStay) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NftStay) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NftStay) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func init() {
	proto.RegisterType((*NftStay)(nil), "kryptopoo.marketplace.nftstays.NftStay")
}

func init() { proto.RegisterFile("nftstays/nftStay.proto", fileDescriptor_bfd4549cc2c9013f) }

var fileDescriptor_bfd4549cc2c9013f = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0x36, 0x6d, 0xfa, 0xfb, 0x97, 0x10, 0xb2, 0x2a, 0x64, 0x75, 0xb0, 0x22, 0xa6,
	0x4e, 0xb1, 0x10, 0x6f, 0x80, 0x58, 0x10, 0x12, 0x43, 0x11, 0x0b, 0x9b, 0x9b, 0xb8, 0xc1, 0x0a,
	0xf1, 0xb5, 0x9c, 0x8b, 0x20, 0x6f, 0xc1, 0x3b, 0xb1, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0,
	0x38, 0x6a, 0xd4, 0xed, 0x9c, 0x73, 0xcf, 0x3d, 0xc3, 0x47, 0x2f, 0xec, 0x1e, 0x6b, 0x54, 0x4d,
	0x2d, 0xed, 0x1e, 0x1f, 0x51, 0x35, 0xa9, 0xf3, 0x80, 0xc0, 0x44, 0xe9, 0x1b, 0x87, 0xe0, 0x00,
	0xd2, 0x4a, 0xf9, 0x52, 0xa3, 0x7b, 0x55, 0x99, 0x4e, 0x8f, 0xed, 0xf5, 0xaa, 0x80, 0x02, 0x42,
	0x55, 0xf6, 0x6a, 0xf8, 0xba, 0xfc, 0x22, 0x34, 0x7e, 0x18, 0x76, 0x18, 0xa7, 0x71, 0xe6, 0xb5,
	0x42, 0xf0, 0x9c, 0x24, 0x64, 0xf3, 0x6f, 0x7b, 0xb4, 0xec, 0x8c, 0x4e, 0x4d, 0xce, 0xa7, 0x09,
	0xd9, 0x44, 0xdb, 0xa9, 0xc9, 0xd9, 0x39, 0x9d, 0xd5, 0x77, 0xb7, 0x7c, 0x16, 0x5a, 0xbd, 0x64,
	0x2b, 0x3a, 0x87, 0x77, 0xab, 0x3d, 0x8f, 0x42, 0x36, 0x18, 0xc6, 0x68, 0x64, 0x55, 0xa5, 0xf9,
	0x3c, 0x84, 0x41, 0xb3, 0x84, 0xfe, 0xcf, 0x75, 0x9d, 0x79, 0xe3, 0xd0, 0x80, 0xe5, 0x8b, 0x70,
	0x3a, 0x8d, 0xfa, 0x2d, 0x53, 0xa9, 0x42, 0xf3, 0x78, 0xd8, 0x0a, 0x86, 0xad, 0xe9, 0x12, 0xa1,
	0xd4, 0xf6, 0xc9, 0x1b, 0xbe, 0x0c, 0x87, 0xd1, 0xdf, 0xdc, 0x7f, 0xb7, 0x82, 0x1c, 0x5a, 0x41,
	0x7e, 0x5b, 0x41, 0x3e, 0x3b, 0x31, 0x39, 0x74, 0x62, 0xf2, 0xd3, 0x89, 0xc9, 0xf3, 0x55, 0x61,
	0xf0, 0xe5, 0x6d, 0x97, 0x66, 0x50, 0xc9, 0x11, 0x90, 0x3c, 0x01, 0x24, 0x3f, 0xe4, 0x08, 0x14,
	0x1b, 0xa7, 0xeb, 0xdd, 0x22, 0x90, 0xb9, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x64, 0xd5, 0x60,
	0x01, 0x69, 0x01, 0x00, 0x00,
}

func (m *NftStay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftStay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftStay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SID) > 0 {
		i -= len(m.SID)
		copy(dAtA[i:], m.SID)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.SID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintNftStay(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintNftStay(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftStay(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftStay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftStay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovNftStay(uint64(m.Id))
	}
	l = len(m.SID)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovNftStay(uint64(l))
	}
	return n
}

func sovNftStay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftStay(x uint64) (n int) {
	return sovNftStay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftStay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftStay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftStay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftStay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftStay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftStay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftStay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftStay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftStay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftStay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftStay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftStay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftStay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftStay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftStay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftStay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftStay = fmt.Errorf("proto: unexpected end of group")
)
